name: Deploy Infrastructure

on:
  push:
    branches: [main]
    paths:
      - "data-layer/**"
      - "networking/**"
      - "azure-setup/storage-classes.yaml"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

env:
  AKS_RESOURCE_GROUP: teleios-dupe-rg
  AKS_CLUSTER_NAME: rideshare-aks-cluster

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install kubectl and set AKS context
        run: |
          az aks install-cli
          az aks get-credentials \
            --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
            --name ${{ env.AKS_CLUSTER_NAME }} \
            --overwrite-existing
          kubelogin convert-kubeconfig -l azurecli

      - name: Validate Kubernetes manifests
        run: |
          echo "Validating manifests..."
          kubectl --dry-run=client apply -f storage-classes.yaml
          kubectl --dry-run=client apply -f data-layer/
          kubectl --dry-run=client apply -f networking/ingress-rules.yaml

      - name: Deploy PostgreSQL infrastructure
        run: |
          echo "Deploying PostgreSQL secrets..."
          kubectl apply -f data-layer/postgresql-secret.yaml

          echo "Deploying PostgreSQL headless service..."
          kubectl apply -f data-layer/postgresql-headless-service.yaml

          echo "Deploying PostgreSQL primary..."
          kubectl apply -f data-layer/postgresql-primary-statefulset.yaml

          echo "Deploying PostgreSQL replica..."
          kubectl apply -f data-layer/postgresql-replica-statefulset.yaml

      - name: Deploy Redis infrastructure
        run: |
          echo "Deploying Redis configuration..."
          kubectl apply -f data-layer/redis-configmap.yaml

          echo "Deploying Redis headless service..."
          kubectl apply -f data-layer/redis-headless-service.yaml

          echo "Deploying Redis cluster..."
          kubectl apply -f data-layer/redis-statefulset.yaml

      - name: Deploy ingress rules
        run: |
          echo "Deploying ingress rules..."
          kubectl apply -f networking/ingress-rules.yaml

      - name: Wait for deployments
        run: |
          echo "Waiting for PostgreSQL primary to be ready..."
          kubectl rollout status statefulset/postgresql-primary --timeout=300s

          echo "Waiting for PostgreSQL replica to be ready..."
          kubectl rollout status statefulset/postgresql-replica --timeout=300s

          echo "Waiting for Redis cluster to be ready..."
          kubectl rollout status statefulset/redis --timeout=300s
